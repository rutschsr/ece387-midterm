   1               		.file	"chipInterface.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.rodata.str1.1,"aMS",@progbits,1
  11               	.LC0:
  12 0000 3078 3830 		.string	"0x80"
  12      00
  13               	.LC1:
  14 0005 3078 3831 		.string	"0x81"
  14      00
  15               	.LC2:
  16 000a 5365 7269 		.string	"SerialWorking"
  16      616C 576F 
  16      726B 696E 
  16      6700 
  17               	.LC3:
  18 0018 5375 7070 		.string	"Supposed to Print I2C data next"
  18      6F73 6564 
  18      2074 6F20 
  18      5072 696E 
  18      7420 4932 
  19               		.section	.text.startup,"ax",@progbits
  20               	.global	main
  22               	main:
  23               	.LFB6:
  24               		.file 1 "chipInterface.c"
   1:chipInterface.c **** #include <stdint.h>
   2:chipInterface.c **** #include <util/delay.h>
   3:chipInterface.c **** #include "i2cmaster.h"
   4:chipInterface.c **** #include <avr/io.h>
   5:chipInterface.c **** #include "USART.h"
   6:chipInterface.c **** 
   7:chipInterface.c **** 
   8:chipInterface.c **** #define __DELAY_BACKWARD_COMPATIBLE__
   9:chipInterface.c **** 
  10:chipInterface.c **** //I2C Location as defined in Raspberry Pi test
  11:chipInterface.c **** #define INA219 0x40
  12:chipInterface.c **** 
  13:chipInterface.c **** //SCL is on pin D19 (PC5)
  14:chipInterface.c **** //SDA is on pin D18 (PC4)
  15:chipInterface.c **** 
  16:chipInterface.c **** //Any Function Forward Declerations:
  17:chipInterface.c **** 
  18:chipInterface.c **** /**
  19:chipInterface.c ****  * @brief 
  20:chipInterface.c ****  * 
  21:chipInterface.c ****  * @return int 
  22:chipInterface.c ****  */
  23:chipInterface.c **** int main(void)
  24:chipInterface.c **** {
  25               		.loc 1 24 0
  26               		.cfi_startproc
  27               	/* prologue: function */
  28               	/* frame size = 0 */
  29               	/* stack size = 0 */
  30               	.L__stack_usage = 0
  31               	.LVL0:
  25:chipInterface.c **** uint8_t x=1;
  26:chipInterface.c **** uint8_t z=1;
  27:chipInterface.c **** uint8_t ret;
  28:chipInterface.c **** uint8_t ret1;
  29:chipInterface.c **** unsigned char writeadr="0x80";
  32               		.loc 1 29 0
  33 0000 80E0      		ldi r24,lo8(.LC0)
  34 0002 90E0      		ldi r25,hi8(.LC0)
  35 0004 D82F      		mov r29,r24
  36               	.LVL1:
  30:chipInterface.c **** unsigned char readadr="0x81";
  37               		.loc 1 30 0
  38 0006 80E0      		ldi r24,lo8(.LC1)
  39 0008 90E0      		ldi r25,hi8(.LC1)
  40 000a C82F      		mov r28,r24
  41               	.LVL2:
  31:chipInterface.c **** //initialize the i2c buss
  32:chipInterface.c **** i2c_init();
  42               		.loc 1 32 0
  43 000c 0E94 0000 		call i2c_init
  44               	.LVL3:
  33:chipInterface.c **** //Initialize USART:
  34:chipInterface.c **** initUSART();
  45               		.loc 1 34 0
  46 0010 0E94 0000 		call initUSART
  47               	.LVL4:
  48               	.L2:
  35:chipInterface.c **** 
  36:chipInterface.c **** while(1){
  37:chipInterface.c **** printString("SerialWorking");
  49               		.loc 1 37 0 discriminator 1
  50 0014 80E0      		ldi r24,lo8(.LC2)
  51 0016 90E0      		ldi r25,hi8(.LC2)
  52 0018 0E94 0000 		call printString
  53               	.LVL5:
  38:chipInterface.c **** transmitByte('\n');
  54               		.loc 1 38 0 discriminator 1
  55 001c 8AE0      		ldi r24,lo8(10)
  56 001e 0E94 0000 		call transmitByte
  57               	.LVL6:
  39:chipInterface.c **** 
  40:chipInterface.c **** //Start i2c Communications:
  41:chipInterface.c **** 
  42:chipInterface.c **** //May need to write configuration in first.
  43:chipInterface.c **** //Write Address of first data register.
  44:chipInterface.c **** // i2c_start_wait(INA219+I2C_WRITE);
  45:chipInterface.c **** // //i2c_write(INA219); //may be neccessary
  46:chipInterface.c **** // int z = 0;
  47:chipInterface.c **** // z=i2c_write(0x01);
  48:chipInterface.c **** // i2c_stop();
  49:chipInterface.c **** // printString("Location A");
  50:chipInterface.c **** // transmitByte('\n');
  51:chipInterface.c **** 
  52:chipInterface.c **** 
  53:chipInterface.c **** //Read first register contents
  54:chipInterface.c **** z=i2c_start(writeadr);
  58               		.loc 1 54 0 discriminator 1
  59 0022 8D2F      		mov r24,r29
  60 0024 0E94 0000 		call i2c_start
  61               	.LVL7:
  62 0028 F82E      		mov r15,r24
  63               	.LVL8:
  55:chipInterface.c **** 
  56:chipInterface.c **** i2c_write(0x04);
  64               		.loc 1 56 0 discriminator 1
  65 002a 84E0      		ldi r24,lo8(4)
  66 002c 0E94 0000 		call i2c_write
  67               	.LVL9:
  57:chipInterface.c **** i2c_stop();
  68               		.loc 1 57 0 discriminator 1
  69 0030 0E94 0000 		call i2c_stop
  70               	.LVL10:
  71               	.LBB8:
  72               	.LBB9:
  73               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  74               		.loc 2 187 0 discriminator 1
  75 0034 8FE5      		ldi r24,lo8(-5537)
  76 0036 9AEE      		ldi r25,hi8(-5537)
  77 0038 0197      	1:	sbiw r24,1
  78 003a 01F4      		brne 1b
  79 003c 00C0      		rjmp .
  80 003e 0000      		nop
  81               	.LVL11:
  82               	.LBE9:
  83               	.LBE8:
  58:chipInterface.c **** _delay_ms(15);
  59:chipInterface.c **** x=i2c_rep_start(readadr);
  84               		.loc 1 59 0 discriminator 1
  85 0040 8C2F      		mov r24,r28
  86 0042 0E94 0000 		call i2c_rep_start
  87               	.LVL12:
  88 0046 E82E      		mov r14,r24
  89               	.LVL13:
  60:chipInterface.c **** ret=i2c_read(1);
  90               		.loc 1 60 0 discriminator 1
  91 0048 0E94 0000 		call i2c_readAck
  92               	.LVL14:
  93 004c 082F      		mov r16,r24
  94               	.LVL15:
  61:chipInterface.c **** ret1=i2c_read(0);
  95               		.loc 1 61 0 discriminator 1
  96 004e 0E94 0000 		call i2c_readNak
  97               	.LVL16:
  98 0052 182F      		mov r17,r24
  99               	.LVL17:
  62:chipInterface.c **** i2c_stop();
 100               		.loc 1 62 0 discriminator 1
 101 0054 0E94 0000 		call i2c_stop
 102               	.LVL18:
 103               	.LBB10:
 104               	.LBB11:
 105               		.loc 2 187 0 discriminator 1
 106 0058 8FE5      		ldi r24,lo8(-5537)
 107 005a 9AEE      		ldi r25,hi8(-5537)
 108 005c 0197      	1:	sbiw r24,1
 109 005e 01F4      		brne 1b
 110 0060 00C0      		rjmp .
 111 0062 0000      		nop
 112               	.LVL19:
 113               	.LBE11:
 114               	.LBE10:
  63:chipInterface.c **** _delay_ms(15);
  64:chipInterface.c **** //Transmit to Serial monitor (Debug)
  65:chipInterface.c **** printString("Supposed to Print I2C data next");
 115               		.loc 1 65 0 discriminator 1
 116 0064 80E0      		ldi r24,lo8(.LC3)
 117 0066 90E0      		ldi r25,hi8(.LC3)
 118 0068 0E94 0000 		call printString
 119               	.LVL20:
  66:chipInterface.c **** transmitByte('\n');
 120               		.loc 1 66 0 discriminator 1
 121 006c 8AE0      		ldi r24,lo8(10)
 122 006e 0E94 0000 		call transmitByte
 123               	.LVL21:
  67:chipInterface.c **** printByte(x);
 124               		.loc 1 67 0 discriminator 1
 125 0072 8E2D      		mov r24,r14
 126 0074 0E94 0000 		call printByte
 127               	.LVL22:
  68:chipInterface.c **** transmitByte('\n');
 128               		.loc 1 68 0 discriminator 1
 129 0078 8AE0      		ldi r24,lo8(10)
 130 007a 0E94 0000 		call transmitByte
 131               	.LVL23:
  69:chipInterface.c **** printByte(z);
 132               		.loc 1 69 0 discriminator 1
 133 007e 8F2D      		mov r24,r15
 134 0080 0E94 0000 		call printByte
 135               	.LVL24:
  70:chipInterface.c **** transmitByte('\n');
 136               		.loc 1 70 0 discriminator 1
 137 0084 8AE0      		ldi r24,lo8(10)
 138 0086 0E94 0000 		call transmitByte
 139               	.LVL25:
  71:chipInterface.c **** printByte(ret);
 140               		.loc 1 71 0 discriminator 1
 141 008a 802F      		mov r24,r16
 142 008c 0E94 0000 		call printByte
 143               	.LVL26:
  72:chipInterface.c **** printByte(ret1);
 144               		.loc 1 72 0 discriminator 1
 145 0090 812F      		mov r24,r17
 146 0092 0E94 0000 		call printByte
 147               	.LVL27:
  73:chipInterface.c **** transmitByte('\n');
 148               		.loc 1 73 0 discriminator 1
 149 0096 8AE0      		ldi r24,lo8(10)
 150 0098 0E94 0000 		call transmitByte
 151               	.LVL28:
 152               	.LBB12:
 153               	.LBB13:
 154               		.loc 2 187 0 discriminator 1
 155 009c 8FE5      		ldi r24,lo8(-5537)
 156 009e 9AEE      		ldi r25,hi8(-5537)
 157 00a0 0197      	1:	sbiw r24,1
 158 00a2 01F4      		brne 1b
 159 00a4 00C0      		rjmp .
 160 00a6 0000      		nop
 161 00a8 00C0      		rjmp .L2
 162               	.LBE13:
 163               	.LBE12:
 164               		.cfi_endproc
 165               	.LFE6:
 167               		.text
 168               	.Letext0:
 169               		.file 3 "/usr/lib/avr/include/stdint.h"
 170               		.file 4 "i2cmaster.h"
 171               		.file 5 "USART.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chipInterface.c
     chipInterface.s:2      *ABS*:000000000000003e __SP_H__
     chipInterface.s:3      *ABS*:000000000000003d __SP_L__
     chipInterface.s:4      *ABS*:000000000000003f __SREG__
     chipInterface.s:5      *ABS*:0000000000000000 __tmp_reg__
     chipInterface.s:6      *ABS*:0000000000000001 __zero_reg__
     chipInterface.s:22     .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
i2c_init
initUSART
printString
transmitByte
i2c_start
i2c_write
i2c_stop
i2c_rep_start
i2c_readAck
i2c_readNak
printByte
__do_copy_data
