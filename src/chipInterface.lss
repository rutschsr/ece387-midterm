
chipInterface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00000462  000004d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000462  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000024  00000000  00000000  00000510  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000000d  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00000541  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000554  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000060  00000000  00000000  00000598  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000de8  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000869  00000000  00000000  000013e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000664  00000000  00000000  00001c49  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000184  00000000  00000000  000022b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000004a9  00000000  00000000  00002434  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000060f  00000000  00000000  000028dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000010  00000000  00000000  00002eec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e6       	ldi	r30, 0x62	; 98
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 33       	cpi	r26, 0x38	; 56
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 ba 01 	call	0x374	; 0x374 <main>
  8e:	0c 94 2f 02 	jmp	0x45e	; 0x45e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <initUSART>:
#include <avr/io.h>
#include "USART.h"
#include <util/setbaud.h>

void initUSART(void) {                                /* requires BAUD */
  UBRR0H = UBRRH_VALUE;                        /* defined in setbaud.h */
  96:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  UBRR0L = UBRRL_VALUE;
  9a:	87 e6       	ldi	r24, 0x67	; 103
  9c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
#if USE_2X
  UCSR0A |= (1 << U2X0);
#else
  UCSR0A &= ~(1 << U2X0);
  a0:	e0 ec       	ldi	r30, 0xC0	; 192
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	8d 7f       	andi	r24, 0xFD	; 253
  a8:	80 83       	st	Z, r24
#endif
                                  /* Enable USART transmitter/receiver */
  UCSR0B = (1 << TXEN0) | (1 << RXEN0);
  aa:	88 e1       	ldi	r24, 0x18	; 24
  ac:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);   /* 8 data bits, 1 stop bit */
  b0:	86 e0       	ldi	r24, 0x06	; 6
  b2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
  b6:	08 95       	ret

000000b8 <transmitByte>:
}


void transmitByte(uint8_t data) {
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSR0A, UDRE0);
  b8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
  bc:	95 ff       	sbrs	r25, 5
  be:	fc cf       	rjmp	.-8      	; 0xb8 <transmitByte>
  UDR0 = data;                                            /* send data */
  c0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  c4:	08 95       	ret

000000c6 <receiveByte>:
}

uint8_t receiveByte(void) {
  loop_until_bit_is_set(UCSR0A, RXC0);       /* Wait for incoming data */
  c6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
  ca:	87 ff       	sbrs	r24, 7
  cc:	fc cf       	rjmp	.-8      	; 0xc6 <receiveByte>
  return UDR0;                                /* return register value */
  ce:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
  d2:	08 95       	ret

000000d4 <printString>:


                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
  d4:	0f 93       	push	r16
  d6:	1f 93       	push	r17
  d8:	cf 93       	push	r28
  da:	8c 01       	movw	r16, r24
  uint8_t i = 0;
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  while (myString[i]) {
  de:	f8 01       	movw	r30, r16
  e0:	ec 0f       	add	r30, r28
  e2:	f1 1d       	adc	r31, r1
  e4:	80 81       	ld	r24, Z
  e6:	88 23       	and	r24, r24
  e8:	21 f0       	breq	.+8      	; 0xf2 <printString+0x1e>
    transmitByte(myString[i]);
  ea:	0e 94 5c 00 	call	0xb8	; 0xb8 <transmitByte>
    i++;
  ee:	cf 5f       	subi	r28, 0xFF	; 255
  f0:	f6 cf       	rjmp	.-20     	; 0xde <printString+0xa>
  }
}
  f2:	cf 91       	pop	r28
  f4:	1f 91       	pop	r17
  f6:	0f 91       	pop	r16
  f8:	08 95       	ret

000000fa <readString>:

void readString(char myString[], uint8_t maxLength) {
  fa:	cf 92       	push	r12
  fc:	df 92       	push	r13
  fe:	ef 92       	push	r14
 100:	ff 92       	push	r15
 102:	0f 93       	push	r16
 104:	1f 93       	push	r17
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	6c 01       	movw	r12, r24
  char response;
  uint8_t i;
  i = 0;
 10c:	f1 2c       	mov	r15, r1
  while (i < (maxLength - 1)) {                   /* prevent over-runs */
 10e:	06 2f       	mov	r16, r22
 110:	10 e0       	ldi	r17, 0x00	; 0
 112:	01 50       	subi	r16, 0x01	; 1
 114:	11 09       	sbc	r17, r1
 116:	cf 2d       	mov	r28, r15
 118:	d0 e0       	ldi	r29, 0x00	; 0
 11a:	c0 17       	cp	r28, r16
 11c:	d1 07       	cpc	r29, r17
 11e:	44 f4       	brge	.+16     	; 0x130 <readString+0x36>
    response = receiveByte();
 120:	0e 94 63 00 	call	0xc6	; 0xc6 <receiveByte>
 124:	e8 2e       	mov	r14, r24
    transmitByte(response);                                    /* echo */
 126:	0e 94 5c 00 	call	0xb8	; 0xb8 <transmitByte>
    if (response == '\r') {                     /* enter marks the end */
 12a:	8d e0       	ldi	r24, 0x0D	; 13
 12c:	e8 12       	cpse	r14, r24
 12e:	0c c0       	rjmp	.+24     	; 0x148 <readString+0x4e>
    else {
      myString[i] = response;                       /* add in a letter */
      i++;
    }
  }
  myString[i] = 0;                          /* terminal NULL character */
 130:	cc 0d       	add	r28, r12
 132:	dd 1d       	adc	r29, r13
 134:	18 82       	st	Y, r1
}
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	1f 91       	pop	r17
 13c:	0f 91       	pop	r16
 13e:	ff 90       	pop	r15
 140:	ef 90       	pop	r14
 142:	df 90       	pop	r13
 144:	cf 90       	pop	r12
 146:	08 95       	ret
    transmitByte(response);                                    /* echo */
    if (response == '\r') {                     /* enter marks the end */
      break;
    }
    else {
      myString[i] = response;                       /* add in a letter */
 148:	cc 0d       	add	r28, r12
 14a:	dd 1d       	adc	r29, r13
 14c:	e8 82       	st	Y, r14
      i++;
 14e:	f3 94       	inc	r15
 150:	e2 cf       	rjmp	.-60     	; 0x116 <readString+0x1c>

00000152 <printByte>:
    }
  }
  myString[i] = 0;                          /* terminal NULL character */
}

void printByte(uint8_t byte) {
 152:	cf 93       	push	r28
 154:	c8 2f       	mov	r28, r24
              /* Converts a byte to a string of decimal text, sends it */
  transmitByte('0' + (byte / 100));                        /* Hundreds */
 156:	64 e6       	ldi	r22, 0x64	; 100
 158:	0e 94 0f 02 	call	0x41e	; 0x41e <__udivmodqi4>
 15c:	80 5d       	subi	r24, 0xD0	; 208
 15e:	0e 94 5c 00 	call	0xb8	; 0xb8 <transmitByte>
  transmitByte('0' + ((byte / 10) % 10));                      /* Tens */
 162:	2a e0       	ldi	r18, 0x0A	; 10
 164:	8c 2f       	mov	r24, r28
 166:	62 2f       	mov	r22, r18
 168:	0e 94 0f 02 	call	0x41e	; 0x41e <__udivmodqi4>
 16c:	c9 2f       	mov	r28, r25
 16e:	0e 94 0f 02 	call	0x41e	; 0x41e <__udivmodqi4>
 172:	80 e3       	ldi	r24, 0x30	; 48
 174:	89 0f       	add	r24, r25
 176:	0e 94 5c 00 	call	0xb8	; 0xb8 <transmitByte>
  transmitByte('0' + (byte % 10));                             /* Ones */
 17a:	80 e3       	ldi	r24, 0x30	; 48
 17c:	8c 0f       	add	r24, r28
}
 17e:	cf 91       	pop	r28

void printByte(uint8_t byte) {
              /* Converts a byte to a string of decimal text, sends it */
  transmitByte('0' + (byte / 100));                        /* Hundreds */
  transmitByte('0' + ((byte / 10) % 10));                      /* Tens */
  transmitByte('0' + (byte % 10));                             /* Ones */
 180:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <transmitByte>

00000184 <printWord>:
}

void printWord(uint16_t word) {
 184:	0f 93       	push	r16
 186:	1f 93       	push	r17
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	8c 01       	movw	r16, r24
  transmitByte('0' + (word / 10000));                 /* Ten-thousands */
 18e:	60 e1       	ldi	r22, 0x10	; 16
 190:	77 e2       	ldi	r23, 0x27	; 39
 192:	0e 94 1b 02 	call	0x436	; 0x436 <__udivmodhi4>
 196:	80 e3       	ldi	r24, 0x30	; 48
 198:	86 0f       	add	r24, r22
 19a:	0e 94 5c 00 	call	0xb8	; 0xb8 <transmitByte>
  transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
 19e:	c8 01       	movw	r24, r16
 1a0:	68 ee       	ldi	r22, 0xE8	; 232
 1a2:	73 e0       	ldi	r23, 0x03	; 3
 1a4:	0e 94 1b 02 	call	0x436	; 0x436 <__udivmodhi4>
 1a8:	cb 01       	movw	r24, r22
 1aa:	ca e0       	ldi	r28, 0x0A	; 10
 1ac:	d0 e0       	ldi	r29, 0x00	; 0
 1ae:	be 01       	movw	r22, r28
 1b0:	0e 94 1b 02 	call	0x436	; 0x436 <__udivmodhi4>
 1b4:	80 5d       	subi	r24, 0xD0	; 208
 1b6:	0e 94 5c 00 	call	0xb8	; 0xb8 <transmitByte>
  transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
 1ba:	c8 01       	movw	r24, r16
 1bc:	64 e6       	ldi	r22, 0x64	; 100
 1be:	70 e0       	ldi	r23, 0x00	; 0
 1c0:	0e 94 1b 02 	call	0x436	; 0x436 <__udivmodhi4>
 1c4:	cb 01       	movw	r24, r22
 1c6:	be 01       	movw	r22, r28
 1c8:	0e 94 1b 02 	call	0x436	; 0x436 <__udivmodhi4>
 1cc:	80 5d       	subi	r24, 0xD0	; 208
 1ce:	0e 94 5c 00 	call	0xb8	; 0xb8 <transmitByte>
  transmitByte('0' + ((word / 10) % 10));                      /* Tens */
 1d2:	c8 01       	movw	r24, r16
 1d4:	be 01       	movw	r22, r28
 1d6:	0e 94 1b 02 	call	0x436	; 0x436 <__udivmodhi4>
 1da:	18 2f       	mov	r17, r24
 1dc:	cb 01       	movw	r24, r22
 1de:	be 01       	movw	r22, r28
 1e0:	0e 94 1b 02 	call	0x436	; 0x436 <__udivmodhi4>
 1e4:	80 5d       	subi	r24, 0xD0	; 208
 1e6:	0e 94 5c 00 	call	0xb8	; 0xb8 <transmitByte>
  transmitByte('0' + (word % 10));                             /* Ones */
 1ea:	80 e3       	ldi	r24, 0x30	; 48
 1ec:	81 0f       	add	r24, r17
}
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	1f 91       	pop	r17
 1f4:	0f 91       	pop	r16
void printWord(uint16_t word) {
  transmitByte('0' + (word / 10000));                 /* Ten-thousands */
  transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
  transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
  transmitByte('0' + ((word / 10) % 10));                      /* Tens */
  transmitByte('0' + (word % 10));                             /* Ones */
 1f6:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <transmitByte>

000001fa <printBinaryByte>:
}

void printBinaryByte(uint8_t byte) {
 1fa:	1f 93       	push	r17
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	1f 92       	push	r1
 202:	cd b7       	in	r28, 0x3d	; 61
 204:	de b7       	in	r29, 0x3e	; 62
 206:	89 83       	std	Y+1, r24	; 0x01
                       /* Prints out a byte as a series of 1's and 0's */
  uint8_t bit;
  for (bit = 7; bit < 255; bit--) {
 208:	17 e0       	ldi	r17, 0x07	; 7
    if (bit_is_set(byte, bit))
 20a:	89 81       	ldd	r24, Y+1	; 0x01
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	01 2e       	mov	r0, r17
 210:	02 c0       	rjmp	.+4      	; 0x216 <printBinaryByte+0x1c>
 212:	95 95       	asr	r25
 214:	87 95       	ror	r24
 216:	0a 94       	dec	r0
 218:	e2 f7       	brpl	.-8      	; 0x212 <printBinaryByte+0x18>
 21a:	80 ff       	sbrs	r24, 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <printBinaryByte+0x28>
      transmitByte('1');
 21e:	81 e3       	ldi	r24, 0x31	; 49
 220:	01 c0       	rjmp	.+2      	; 0x224 <printBinaryByte+0x2a>
    else
      transmitByte('0');
 222:	80 e3       	ldi	r24, 0x30	; 48
 224:	0e 94 5c 00 	call	0xb8	; 0xb8 <transmitByte>
}

void printBinaryByte(uint8_t byte) {
                       /* Prints out a byte as a series of 1's and 0's */
  uint8_t bit;
  for (bit = 7; bit < 255; bit--) {
 228:	11 50       	subi	r17, 0x01	; 1
 22a:	78 f7       	brcc	.-34     	; 0x20a <printBinaryByte+0x10>
    if (bit_is_set(byte, bit))
      transmitByte('1');
    else
      transmitByte('0');
  }
}
 22c:	0f 90       	pop	r0
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	1f 91       	pop	r17
 234:	08 95       	ret

00000236 <nibbleToHexCharacter>:

char nibbleToHexCharacter(uint8_t nibble) {
                                   /* Converts 4 bits into hexadecimal */
  if (nibble < 10) {
 236:	8a 30       	cpi	r24, 0x0A	; 10
 238:	10 f4       	brcc	.+4      	; 0x23e <nibbleToHexCharacter+0x8>
    return ('0' + nibble);
 23a:	80 5d       	subi	r24, 0xD0	; 208
 23c:	08 95       	ret
  }
  else {
    return ('A' + nibble - 10);
 23e:	89 5c       	subi	r24, 0xC9	; 201
  }
}
 240:	08 95       	ret

00000242 <printHexByte>:

void printHexByte(uint8_t byte) {
 242:	cf 93       	push	r28
 244:	c8 2f       	mov	r28, r24
                        /* Prints a byte as its hexadecimal equivalent */
  uint8_t nibble;
  nibble = (byte & 0b11110000) >> 4;
  transmitByte(nibbleToHexCharacter(nibble));
 246:	82 95       	swap	r24
 248:	8f 70       	andi	r24, 0x0F	; 15
 24a:	0e 94 1b 01 	call	0x236	; 0x236 <nibbleToHexCharacter>
 24e:	0e 94 5c 00 	call	0xb8	; 0xb8 <transmitByte>
  nibble = byte & 0b00001111;
  transmitByte(nibbleToHexCharacter(nibble));
 252:	8c 2f       	mov	r24, r28
 254:	8f 70       	andi	r24, 0x0F	; 15
 256:	0e 94 1b 01 	call	0x236	; 0x236 <nibbleToHexCharacter>
}
 25a:	cf 91       	pop	r28
                        /* Prints a byte as its hexadecimal equivalent */
  uint8_t nibble;
  nibble = (byte & 0b11110000) >> 4;
  transmitByte(nibbleToHexCharacter(nibble));
  nibble = byte & 0b00001111;
  transmitByte(nibbleToHexCharacter(nibble));
 25c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <transmitByte>

00000260 <getNumber>:
}

uint8_t getNumber(void) {
 260:	0f 93       	push	r16
 262:	1f 93       	push	r17
 264:	cf 93       	push	r28
 266:	df 93       	push	r29
  // Gets a numerical 0-255 from the serial port.
  // Converts from string to number.
  char hundreds = '0';
  char tens = '0';
  char ones = '0';
  char thisChar = '0';
 268:	d0 e3       	ldi	r29, 0x30	; 48
uint8_t getNumber(void) {
  // Gets a numerical 0-255 from the serial port.
  // Converts from string to number.
  char hundreds = '0';
  char tens = '0';
  char ones = '0';
 26a:	c0 e3       	ldi	r28, 0x30	; 48

uint8_t getNumber(void) {
  // Gets a numerical 0-255 from the serial port.
  // Converts from string to number.
  char hundreds = '0';
  char tens = '0';
 26c:	10 e3       	ldi	r17, 0x30	; 48
  char thisChar = '0';
  do {                                                   /* shift over */
    hundreds = tens;
    tens = ones;
    ones = thisChar;
    thisChar = receiveByte();                   /* get a new character */
 26e:	0e 94 63 00 	call	0xc6	; 0xc6 <receiveByte>
 272:	08 2f       	mov	r16, r24
    transmitByte(thisChar);                                    /* echo */
 274:	0e 94 5c 00 	call	0xb8	; 0xb8 <transmitByte>
  } while (thisChar != '\r');                     /* until type return */
 278:	0d 30       	cpi	r16, 0x0D	; 13
 27a:	21 f0       	breq	.+8      	; 0x284 <getNumber+0x24>
 27c:	1c 2f       	mov	r17, r28
 27e:	cd 2f       	mov	r28, r29
 280:	d0 2f       	mov	r29, r16
 282:	f5 cf       	rjmp	.-22     	; 0x26e <getNumber+0xe>
  return (100 * (hundreds - '0') + 10 * (tens - '0') + ones - '0');
 284:	10 53       	subi	r17, 0x30	; 48
 286:	d0 53       	subi	r29, 0x30	; 48
 288:	84 e6       	ldi	r24, 0x64	; 100
 28a:	18 9f       	mul	r17, r24
 28c:	d0 0d       	add	r29, r0
 28e:	11 24       	eor	r1, r1
 290:	cc 0f       	add	r28, r28
 292:	c0 56       	subi	r28, 0x60	; 96
 294:	8c 2f       	mov	r24, r28
 296:	88 0f       	add	r24, r24
 298:	88 0f       	add	r24, r24
 29a:	8c 0f       	add	r24, r28
}
 29c:	8d 0f       	add	r24, r29
 29e:	df 91       	pop	r29
 2a0:	cf 91       	pop	r28
 2a2:	1f 91       	pop	r17
 2a4:	0f 91       	pop	r16
 2a6:	08 95       	ret

000002a8 <i2c_delay_T2>:
1:	sbiw r24, 1  ; 2 cycle
	brne 1b      ; 2 or 1 cycle, 4 cycles per loop
	pop  r24     ; 2 ycle
	ret          ; 4 cycle = total 60 cycles = 5.0 microsec with 12 Mhz crystal
#elif F_CPU <= 16000000UL
    push r24     ; 2 cycle
 2a8:	8f 93       	push	r24
    ldi	 r24, 17 ; 1 cycle
 2aa:	81 e1       	ldi	r24, 0x11	; 17
	clr  r25     ; 1 cycle
 2ac:	99 27       	eor	r25, r25
1:	sbiw r24, 1  ; 2 cycle
 2ae:	01 97       	sbiw	r24, 0x01	; 1
	brne 1b      ; 2 or 1 cycle, 4 cycles per loop
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <i2c_delay_T2+0x6>
	pop  r24     ; 2 ycle
 2b2:	8f 91       	pop	r24
	ret          ; 4 cycle = total 80 cycles = 5.0 microsec with 16 Mhz crystal
 2b4:	08 95       	ret

000002b6 <i2c_init>:
; extern void i2c_init(void)
;*************************************************************************
	.global i2c_init
	.func i2c_init
i2c_init:
	cbi SDA_DDR,SDA		;release SDA
 2b6:	3c 98       	cbi	0x07, 4	; 7
	cbi SCL_DDR,SCL		;release SCL
 2b8:	3d 98       	cbi	0x07, 5	; 7
	cbi SDA_OUT,SDA
 2ba:	44 98       	cbi	0x08, 4	; 8
	cbi SCL_OUT,SCL
 2bc:	45 98       	cbi	0x08, 5	; 8
	ret
 2be:	08 95       	ret

000002c0 <i2c_start>:
;*************************************************************************

	.global i2c_start
	.func   i2c_start
i2c_start:
	sbi 	SDA_DDR,SDA	;force SDA low
 2c0:	3c 9a       	sbi	0x07, 4	; 7
	rcall 	i2c_delay_T2	;delay T/2
 2c2:	f2 df       	rcall	.-28     	; 0x2a8 <i2c_delay_T2>
	
	rcall 	i2c_write	;write address
 2c4:	1d d0       	rcall	.+58     	; 0x300 <i2c_write>
	ret
 2c6:	08 95       	ret

000002c8 <i2c_rep_start>:
;*************************************************************************

	.global i2c_rep_start
	.func	i2c_rep_start
i2c_rep_start:
	sbi	SCL_DDR,SCL	;force SCL low
 2c8:	3d 9a       	sbi	0x07, 5	; 7
	rcall 	i2c_delay_T2	;delay  T/2
 2ca:	ee df       	rcall	.-36     	; 0x2a8 <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
 2cc:	3c 98       	cbi	0x07, 4	; 7
	rcall	i2c_delay_T2	;delay T/2
 2ce:	ec df       	rcall	.-40     	; 0x2a8 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
 2d0:	3d 98       	cbi	0x07, 5	; 7
	rcall 	i2c_delay_T2	;delay  T/2
 2d2:	ea df       	rcall	.-44     	; 0x2a8 <i2c_delay_T2>
	sbi 	SDA_DDR,SDA	;force SDA low
 2d4:	3c 9a       	sbi	0x07, 4	; 7
	rcall 	i2c_delay_T2	;delay	T/2
 2d6:	e8 df       	rcall	.-48     	; 0x2a8 <i2c_delay_T2>
	
	rcall	i2c_write	;write address
 2d8:	13 d0       	rcall	.+38     	; 0x300 <i2c_write>
	ret
 2da:	08 95       	ret

000002dc <i2c_start_wait>:
;*************************************************************************

	.global i2c_start_wait
	.func   i2c_start_wait
i2c_start_wait:
	mov	__tmp_reg__,r24
 2dc:	08 2e       	mov	r0, r24

000002de <i2c_start_wait1>:
i2c_start_wait1:
	sbi 	SDA_DDR,SDA	;force SDA low
 2de:	3c 9a       	sbi	0x07, 4	; 7
	rcall 	i2c_delay_T2	;delay T/2
 2e0:	e3 df       	rcall	.-58     	; 0x2a8 <i2c_delay_T2>
	mov	r24,__tmp_reg__
 2e2:	80 2d       	mov	r24, r0
	rcall 	i2c_write	;write address
 2e4:	0d d0       	rcall	.+26     	; 0x300 <i2c_write>
	tst	r24		;if device not busy -> done
 2e6:	88 23       	and	r24, r24
	breq	i2c_start_wait_done
 2e8:	11 f0       	breq	.+4      	; 0x2ee <i2c_start_wait_done>
	rcall	i2c_stop	;terminate write operation
 2ea:	02 d0       	rcall	.+4      	; 0x2f0 <i2c_stop>
	rjmp	i2c_start_wait1	;device busy, poll ack again
 2ec:	f8 cf       	rjmp	.-16     	; 0x2de <i2c_start_wait1>

000002ee <i2c_start_wait_done>:
i2c_start_wait_done:
	ret
 2ee:	08 95       	ret

000002f0 <i2c_stop>:
;*************************************************************************

	.global	i2c_stop
	.func	i2c_stop
i2c_stop:
	sbi	SCL_DDR,SCL	;force SCL low
 2f0:	3d 9a       	sbi	0x07, 5	; 7
	sbi	SDA_DDR,SDA	;force SDA low
 2f2:	3c 9a       	sbi	0x07, 4	; 7
	rcall	i2c_delay_T2	;delay T/2
 2f4:	d9 df       	rcall	.-78     	; 0x2a8 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
 2f6:	3d 98       	cbi	0x07, 5	; 7
	rcall	i2c_delay_T2	;delay T/2
 2f8:	d7 df       	rcall	.-82     	; 0x2a8 <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
 2fa:	3c 98       	cbi	0x07, 4	; 7
	rcall	i2c_delay_T2	;delay T/2
 2fc:	d5 df       	rcall	.-86     	; 0x2a8 <i2c_delay_T2>
	ret
 2fe:	08 95       	ret

00000300 <i2c_write>:
;	data = r24,  return = r25(=0):r24
;*************************************************************************
	.global i2c_write
	.func	i2c_write
i2c_write:
	sec			;set carry flag
 300:	08 94       	sec
	rol 	r24		;shift in carry and out bit one
 302:	88 1f       	adc	r24, r24
	rjmp	i2c_write_first
 304:	01 c0       	rjmp	.+2      	; 0x308 <i2c_write_first>

00000306 <i2c_write_bit>:
i2c_write_bit:
	lsl	r24		;if transmit register empty
 306:	88 0f       	add	r24, r24

00000308 <i2c_write_first>:
i2c_write_first:
	breq	i2c_get_ack
 308:	59 f0       	breq	.+22     	; 0x320 <i2c_get_ack>
	sbi	SCL_DDR,SCL	;force SCL low
 30a:	3d 9a       	sbi	0x07, 5	; 7
	brcc	i2c_write_low
 30c:	18 f4       	brcc	.+6      	; 0x314 <i2c_write_low>
	nop
 30e:	00 00       	nop
	cbi	SDA_DDR,SDA	;release SDA
 310:	3c 98       	cbi	0x07, 4	; 7
	rjmp	i2c_write_high
 312:	02 c0       	rjmp	.+4      	; 0x318 <i2c_write_high>

00000314 <i2c_write_low>:
i2c_write_low:
	sbi	SDA_DDR,SDA	;force SDA low
 314:	3c 9a       	sbi	0x07, 4	; 7
	rjmp	i2c_write_high
 316:	00 c0       	rjmp	.+0      	; 0x318 <i2c_write_high>

00000318 <i2c_write_high>:
i2c_write_high:
	rcall 	i2c_delay_T2	;delay T/2
 318:	c7 df       	rcall	.-114    	; 0x2a8 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
 31a:	3d 98       	cbi	0x07, 5	; 7
	rcall	i2c_delay_T2	;delay T/2
 31c:	c5 df       	rcall	.-118    	; 0x2a8 <i2c_delay_T2>
	rjmp	i2c_write_bit
 31e:	f3 cf       	rjmp	.-26     	; 0x306 <i2c_write_bit>

00000320 <i2c_get_ack>:
	
i2c_get_ack:
	sbi	SCL_DDR,SCL	;force SCL low
 320:	3d 9a       	sbi	0x07, 5	; 7
	cbi	SDA_DDR,SDA	;release SDA
 322:	3c 98       	cbi	0x07, 4	; 7
	rcall	i2c_delay_T2	;delay T/2
 324:	c1 df       	rcall	.-126    	; 0x2a8 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
 326:	3d 98       	cbi	0x07, 5	; 7

00000328 <i2c_ack_wait>:
i2c_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high (in case wait states are inserted)
 328:	35 9b       	sbis	0x06, 5	; 6
	rjmp	i2c_ack_wait
 32a:	fe cf       	rjmp	.-4      	; 0x328 <i2c_ack_wait>
	
	clr	r24		;return 0
 32c:	88 27       	eor	r24, r24
	sbic	SDA_IN,SDA	;if SDA high -> return 1
 32e:	34 99       	sbic	0x06, 4	; 6
	ldi	r24,1
 330:	81 e0       	ldi	r24, 0x01	; 1
	rcall	i2c_delay_T2	;delay T/2
 332:	ba df       	rcall	.-140    	; 0x2a8 <i2c_delay_T2>
	clr	r25
 334:	99 27       	eor	r25, r25
	ret
 336:	08 95       	ret

00000338 <i2c_readNak>:
	.global i2c_readAck
	.global i2c_readNak
	.global i2c_read		
	.func	i2c_read
i2c_readNak:
	clr	r24
 338:	88 27       	eor	r24, r24
	rjmp	i2c_read
 33a:	01 c0       	rjmp	.+2      	; 0x33e <i2c_read>

0000033c <i2c_readAck>:
i2c_readAck:
	ldi	r24,0x01
 33c:	81 e0       	ldi	r24, 0x01	; 1

0000033e <i2c_read>:
i2c_read:
	ldi	r23,0x01	;data = 0x01
 33e:	71 e0       	ldi	r23, 0x01	; 1

00000340 <i2c_read_bit>:
i2c_read_bit:
	sbi	SCL_DDR,SCL	;force SCL low
 340:	3d 9a       	sbi	0x07, 5	; 7
	cbi	SDA_DDR,SDA	;release SDA (from previous ACK)
 342:	3c 98       	cbi	0x07, 4	; 7
	rcall	i2c_delay_T2	;delay T/2
 344:	b1 df       	rcall	.-158    	; 0x2a8 <i2c_delay_T2>
	
	cbi	SCL_DDR,SCL	;release SCL
 346:	3d 98       	cbi	0x07, 5	; 7
	rcall	i2c_delay_T2	;delay T/2
 348:	af df       	rcall	.-162    	; 0x2a8 <i2c_delay_T2>

0000034a <i2c_read_stretch>:
	
i2c_read_stretch:
    sbis SCL_IN, SCL        ;loop until SCL is high (allow slave to stretch SCL)
 34a:	35 9b       	sbis	0x06, 5	; 6
    rjmp	i2c_read_stretch
 34c:	fe cf       	rjmp	.-4      	; 0x34a <i2c_read_stretch>
    	
	clc			;clear carry flag
 34e:	88 94       	clc
	sbic	SDA_IN,SDA	;if SDA is high
 350:	34 99       	sbic	0x06, 4	; 6
	sec			;  set carry flag
 352:	08 94       	sec
	
	rol	r23		;store bit
 354:	77 1f       	adc	r23, r23
	brcc	i2c_read_bit	;while receive register not full
 356:	a0 f7       	brcc	.-24     	; 0x340 <i2c_read_bit>

00000358 <i2c_put_ack>:
	
i2c_put_ack:
	sbi	SCL_DDR,SCL	;force SCL low	
 358:	3d 9a       	sbi	0x07, 5	; 7
	cpi	r24,1
 35a:	81 30       	cpi	r24, 0x01	; 1
	breq	i2c_put_ack_low	;if (ack=0)
 35c:	11 f0       	breq	.+4      	; 0x362 <i2c_put_ack_low>
	cbi	SDA_DDR,SDA	;      release SDA
 35e:	3c 98       	cbi	0x07, 4	; 7
	rjmp	i2c_put_ack_high
 360:	01 c0       	rjmp	.+2      	; 0x364 <i2c_put_ack_high>

00000362 <i2c_put_ack_low>:
i2c_put_ack_low:                ;else
	sbi	SDA_DDR,SDA	;      force SDA low
 362:	3c 9a       	sbi	0x07, 4	; 7

00000364 <i2c_put_ack_high>:
i2c_put_ack_high:
	rcall	i2c_delay_T2	;delay T/2
 364:	a1 df       	rcall	.-190    	; 0x2a8 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
 366:	3d 98       	cbi	0x07, 5	; 7

00000368 <i2c_put_ack_wait>:
i2c_put_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high
 368:	35 9b       	sbis	0x06, 5	; 6
	rjmp	i2c_put_ack_wait
 36a:	fe cf       	rjmp	.-4      	; 0x368 <i2c_put_ack_wait>
	rcall	i2c_delay_T2	;delay T/2
 36c:	9d df       	rcall	.-198    	; 0x2a8 <i2c_delay_T2>
	mov	r24,r23
 36e:	87 2f       	mov	r24, r23
	clr	r25
 370:	99 27       	eor	r25, r25
	ret
 372:	08 95       	ret

00000374 <main>:
{
uint8_t x=1;
uint8_t z=1;
uint8_t ret;
uint8_t ret1;
unsigned char writeadr="0x80";
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	91 e0       	ldi	r25, 0x01	; 1
 378:	d8 2f       	mov	r29, r24
unsigned char readadr="0x81";
 37a:	85 e0       	ldi	r24, 0x05	; 5
 37c:	91 e0       	ldi	r25, 0x01	; 1
 37e:	c8 2f       	mov	r28, r24
//initialize the i2c buss
i2c_init();
 380:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <i2c_init>
//Initialize USART:
initUSART();
 384:	0e 94 4b 00 	call	0x96	; 0x96 <initUSART>

while(1){
printString("SerialWorking");
 388:	8a e0       	ldi	r24, 0x0A	; 10
 38a:	91 e0       	ldi	r25, 0x01	; 1
 38c:	0e 94 6a 00 	call	0xd4	; 0xd4 <printString>
transmitByte('\n');
 390:	8a e0       	ldi	r24, 0x0A	; 10
 392:	0e 94 5c 00 	call	0xb8	; 0xb8 <transmitByte>
// printString("Location A");
// transmitByte('\n');


//Read first register contents
z=i2c_start(writeadr);
 396:	8d 2f       	mov	r24, r29
 398:	0e 94 60 01 	call	0x2c0	; 0x2c0 <i2c_start>
 39c:	f8 2e       	mov	r15, r24

i2c_write(0x04);
 39e:	84 e0       	ldi	r24, 0x04	; 4
 3a0:	0e 94 80 01 	call	0x300	; 0x300 <i2c_write>
i2c_stop();
 3a4:	0e 94 78 01 	call	0x2f0	; 0x2f0 <i2c_stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a8:	8f e5       	ldi	r24, 0x5F	; 95
 3aa:	9a ee       	ldi	r25, 0xEA	; 234
 3ac:	01 97       	sbiw	r24, 0x01	; 1
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <main+0x38>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <main+0x3e>
 3b2:	00 00       	nop
_delay_ms(15);
x=i2c_rep_start(readadr);
 3b4:	8c 2f       	mov	r24, r28
 3b6:	0e 94 64 01 	call	0x2c8	; 0x2c8 <i2c_rep_start>
 3ba:	e8 2e       	mov	r14, r24
ret=i2c_read(1);
 3bc:	0e 94 9e 01 	call	0x33c	; 0x33c <i2c_readAck>
 3c0:	08 2f       	mov	r16, r24
ret1=i2c_read(0);
 3c2:	0e 94 9c 01 	call	0x338	; 0x338 <i2c_readNak>
 3c6:	18 2f       	mov	r17, r24
i2c_stop();
 3c8:	0e 94 78 01 	call	0x2f0	; 0x2f0 <i2c_stop>
 3cc:	8f e5       	ldi	r24, 0x5F	; 95
 3ce:	9a ee       	ldi	r25, 0xEA	; 234
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <main+0x5c>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <main+0x62>
 3d6:	00 00       	nop
_delay_ms(15);
//Transmit to Serial monitor (Debug)
printString("Supposed to Print I2C data next");
 3d8:	88 e1       	ldi	r24, 0x18	; 24
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	0e 94 6a 00 	call	0xd4	; 0xd4 <printString>
transmitByte('\n');
 3e0:	8a e0       	ldi	r24, 0x0A	; 10
 3e2:	0e 94 5c 00 	call	0xb8	; 0xb8 <transmitByte>
printByte(x);
 3e6:	8e 2d       	mov	r24, r14
 3e8:	0e 94 a9 00 	call	0x152	; 0x152 <printByte>
transmitByte('\n');
 3ec:	8a e0       	ldi	r24, 0x0A	; 10
 3ee:	0e 94 5c 00 	call	0xb8	; 0xb8 <transmitByte>
printByte(z);
 3f2:	8f 2d       	mov	r24, r15
 3f4:	0e 94 a9 00 	call	0x152	; 0x152 <printByte>
transmitByte('\n');
 3f8:	8a e0       	ldi	r24, 0x0A	; 10
 3fa:	0e 94 5c 00 	call	0xb8	; 0xb8 <transmitByte>
printByte(ret);
 3fe:	80 2f       	mov	r24, r16
 400:	0e 94 a9 00 	call	0x152	; 0x152 <printByte>
printByte(ret1);
 404:	81 2f       	mov	r24, r17
 406:	0e 94 a9 00 	call	0x152	; 0x152 <printByte>
transmitByte('\n');
 40a:	8a e0       	ldi	r24, 0x0A	; 10
 40c:	0e 94 5c 00 	call	0xb8	; 0xb8 <transmitByte>
 410:	8f e5       	ldi	r24, 0x5F	; 95
 412:	9a ee       	ldi	r25, 0xEA	; 234
 414:	01 97       	sbiw	r24, 0x01	; 1
 416:	f1 f7       	brne	.-4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 418:	00 c0       	rjmp	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 41a:	00 00       	nop
 41c:	b5 cf       	rjmp	.-150    	; 0x388 <main+0x14>

0000041e <__udivmodqi4>:
 41e:	99 1b       	sub	r25, r25
 420:	79 e0       	ldi	r23, 0x09	; 9
 422:	04 c0       	rjmp	.+8      	; 0x42c <__udivmodqi4_ep>

00000424 <__udivmodqi4_loop>:
 424:	99 1f       	adc	r25, r25
 426:	96 17       	cp	r25, r22
 428:	08 f0       	brcs	.+2      	; 0x42c <__udivmodqi4_ep>
 42a:	96 1b       	sub	r25, r22

0000042c <__udivmodqi4_ep>:
 42c:	88 1f       	adc	r24, r24
 42e:	7a 95       	dec	r23
 430:	c9 f7       	brne	.-14     	; 0x424 <__udivmodqi4_loop>
 432:	80 95       	com	r24
 434:	08 95       	ret

00000436 <__udivmodhi4>:
 436:	aa 1b       	sub	r26, r26
 438:	bb 1b       	sub	r27, r27
 43a:	51 e1       	ldi	r21, 0x11	; 17
 43c:	07 c0       	rjmp	.+14     	; 0x44c <__udivmodhi4_ep>

0000043e <__udivmodhi4_loop>:
 43e:	aa 1f       	adc	r26, r26
 440:	bb 1f       	adc	r27, r27
 442:	a6 17       	cp	r26, r22
 444:	b7 07       	cpc	r27, r23
 446:	10 f0       	brcs	.+4      	; 0x44c <__udivmodhi4_ep>
 448:	a6 1b       	sub	r26, r22
 44a:	b7 0b       	sbc	r27, r23

0000044c <__udivmodhi4_ep>:
 44c:	88 1f       	adc	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	5a 95       	dec	r21
 452:	a9 f7       	brne	.-22     	; 0x43e <__udivmodhi4_loop>
 454:	80 95       	com	r24
 456:	90 95       	com	r25
 458:	bc 01       	movw	r22, r24
 45a:	cd 01       	movw	r24, r26
 45c:	08 95       	ret

0000045e <_exit>:
 45e:	f8 94       	cli

00000460 <__stop_program>:
 460:	ff cf       	rjmp	.-2      	; 0x460 <__stop_program>
